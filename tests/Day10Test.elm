module Day10Test exposing (..)

import Day10 exposing (..)
import Expect exposing (equal)
import Test exposing (..)


example1 =
    """......#.#.
#..#.#....
..#######.
.#.#.###..
.#..#.....
..#....#.#
#..#....#.
.##.#..###
##...#..#.
.#....####"""


example2 =
    """#.#...#.#.
.###....#.
.#....#...
##.#.#.#.#
....#.#.#.
.##..###.#
..#...##..
..##....##
......#...
.####.###."""


example3 =
    """.#..#..###
####.###.#
....###.#.
..###.##.#
##.##.#.#.
....###..#
..#.#..#.#
#..#.#.###
.##...##.#
.....#.#.."""


example4 =
    """.#..##.###...#######
##.############..##.
.#.######.########.#
.###.#######.####.#.
#####.##.#.##.###.##
..#####..#.#########
####################
#.####....###.#.#.##
##.#################
#####.##.###..####..
..######..##.#######
####.##.####...##..#
.#####..#.######.###
##...#.##########...
#.##########.#######
.####.#.###.###.#.##
....##.##.###..#####
.#.#.###########.###
#.#.#.#####.####.###
###.##.####.##.#..##"""


problem =
    """#.#.##..#.###...##.#....##....###
...#..#.#.##.....#..##.#...###..#
####...#..#.##...#.##..####..#.#.
..#.#..#...#..####.##....#..####.
....##...#.##...#.#.#...#.#..##..
.#....#.##.#.##......#..#..#..#..
.#.......#.....#.....#...###.....
#.#.#.##..#.#...###.#.###....#..#
#.#..........##..###.......#...##
#.#.........##...##.#.##..####..#
###.#..#####...#..#.#...#..#.#...
.##.#.##.........####.#.#...##...
..##...#..###.....#.#...#.#..#.##
.#...#.....#....##...##...###...#
###...#..#....#............#.....
.#####.#......#.......#.#.##..#.#
#.#......#.#.#.#.......##..##..##
.#.##...##..#..##...##...##.....#
#.#...#.#.#.#.#..#...#...##...#.#
##.#..#....#..##.#.#....#.##...##
...###.#.#.......#.#..#..#...#.##
.....##......#.....#..###.....##.
........##..#.#........##.......#
#.##.##...##..###.#....#....###.#
..##.##....##.#..#.##..#.....#...
.#.#....##..###.#...##.#.#.#..#..
..#..##.##.#.##....#...#.........
#...#.#.#....#.......#.#...#..#.#
...###.##.#...#..#...##...##....#
...#..#.#.#..#####...#.#...####.#
##.#...#..##..#..###.#..........#
..........#..##..#..###...#..#...
.#.##...#....##.....#.#...##...##"""


suite : Test
suite =
    describe "Day10 Tests"
        [ describe "Part 1"
            [ test "example 1" <|
                \_ ->
                    example1 |> parse |> bestLocation |> equal (Just ( { x = 5, y = 8 }, 33 ))
            , test "example 2" <|
                \_ ->
                    example2 |> parse |> bestLocation |> equal (Just ( { x = 1, y = 2 }, 35 ))
            , test "example 3" <|
                \_ ->
                    example3 |> parse |> bestLocation |> equal (Just ( { x = 6, y = 3 }, 41 ))
            , test "example 4" <|
                \_ ->
                    example4 |> parse |> bestLocation |> equal (Just ( { x = 11, y = 13 }, 210 ))
            , test "problem" <|
                \_ ->
                    problem |> parse |> bestLocation |> equal (Just ( { x = 22, y = 28 }, 326 ))
            ]
        , describe "Part 2"
            [ test "problem" <|
                \_ ->
                    let
                        base =
                            problem |> parse |> bestLocation |> Maybe.map Tuple.first

                        decode a =
                            a.x * 100 + a.y
                    in
                    base
                        |> Maybe.map (murderOrder (problem |> parse))
                        |> Maybe.withDefault []
                        |> List.take 200
                        |> List.reverse
                        |> List.head
                        |> Maybe.map decode
                        |> equal (Just 1623)
            ]
        ]
