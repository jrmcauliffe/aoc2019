module Day7Test exposing (..)

import Day5 exposing (..)
import Day7 exposing (..)
import Expect exposing (equal)
import Test exposing (..)


example1 =
    "3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0"


example2 =
    "3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0"


example3 =
    "3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0"


example4 =
    "3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5"


example5 =
    "3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10"


problem =
    "3,8,1001,8,10,8,105,1,0,0,21,42,63,76,101,114,195,276,357,438,99999,3,9,101,2,9,9,102,5,9,9,1001,9,3,9,1002,9,5,9,4,9,99,3,9,101,4,9,9,102,5,9,9,1001,9,5,9,102,2,9,9,4,9,99,3,9,1001,9,3,9,1002,9,5,9,4,9,99,3,9,1002,9,2,9,101,5,9,9,102,3,9,9,101,2,9,9,1002,9,3,9,4,9,99,3,9,101,3,9,9,102,2,9,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,99"


suite : Test
suite =
    describe "Day7 Tests"
        [ describe "Part 1"
            [ test "Example 1" <|
                \_ ->
                    let
                        p =
                            example1 |> parse
                    in
                    process ([ 4, 3, 2, 1, 0 ] |> List.map (\ph -> VM 0 [ ph ] [] 0 p |> run)) 0 |> equal (Just 43210)
            , test "Example 1 find phases" <|
                \_ ->
                    example1 |> parse |> maxPower [ 0, 1, 2, 3, 4 ] 0 |> equal (Just ( [ 4, 3, 2, 1, 0 ], 43210 ))
            , test "Example 2" <|
                \_ ->
                    let
                        p =
                            example2 |> parse
                    in
                    process ([ 0, 1, 2, 3, 4 ] |> List.map (\ph -> VM 0 [ ph ] [] 0 p |> run)) 0 |> equal (Just 54321)
            , test "Example 2 find phases" <|
                \_ ->
                    example2 |> parse |> maxPower [ 0, 1, 2, 3, 4 ] 0 |> equal (Just ( [ 0, 1, 2, 3, 4 ], 54321 ))
            , test "Example 3" <|
                \_ ->
                    let
                        p =
                            example3 |> parse
                    in
                    process ([ 1, 0, 4, 3, 2 ] |> List.map (\ph -> VM 0 [ ph ] [] 0 p |> run)) 0 |> equal (Just 65210)
            , test "Example 3 find phases" <|
                \_ ->
                    example3 |> parse |> maxPower [ 0, 1, 2, 3, 4 ] 0 |> equal (Just ( [ 1, 0, 4, 3, 2 ], 65210 ))
            , test "Problem" <|
                \_ ->
                    problem |> parse |> maxPower [ 0, 1, 2, 3, 4 ] 0 |> Maybe.map Tuple.second |> equal (Just 255590)
            ]
        , describe "Part 2"
            [ test "example 4" <|
                \_ ->
                    let
                        p =
                            example4 |> parse
                    in
                    process ([ 9, 8, 7, 6, 5 ] |> List.map (\ph -> VM 0 [ ph ] [] 0 p |> run)) 0 |> equal (Just 139629729)
            , test "example 5" <|
                \_ ->
                    let
                        p =
                            example5 |> parse
                    in
                    process ([ 9, 7, 8, 5, 6 ] |> List.map (\ph -> VM 0 [ ph ] [] 0 p |> run)) 0 |> equal (Just 18216)
            , test "Problem" <|
                \_ ->
                    problem |> parse |> maxPower [ 5, 6, 7, 8, 9 ] 0 |> Maybe.map Tuple.second |> equal (Just 58285150)
            ]
        ]
